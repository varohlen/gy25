---
import type { CollectionEntry } from 'astro:content';

interface Props {
  requirements: {
    text: string;
    gradeStep: string;
  }[];
  title?: string;
  defaultView?: 'list' | 'table';
}

type GradeStep = 'E' | 'C' | 'A';
type GradeData = { paragraphs: string[] };
type GradeMap = Record<GradeStep, GradeData>;

const { 
  requirements,
  title = "Betygskriterier",
  defaultView = 'list'
} = Astro.props;

// Function to extract paragraphs from HTML content
function extractParagraphs(html: string): string[] {
  const paragraphs: string[] = [];
  const matches = html.match(/<p>(.*?)<\/p>/g);
  if (matches) {
    matches.forEach(p => {
      // Skip D and B grade descriptions
      if (!p.includes('bedöms sammantaget vara mellan')) {
        // Remove the p tags but keep the inner HTML
        const content = p.replace(/<p[^>]*>|<\/p>/g, '');
        paragraphs.push(content);
      }
    });
  }
  return paragraphs;
}

// Process requirements into grade levels
const gradeMap: GradeMap = {
  E: { paragraphs: [] },
  C: { paragraphs: [] },
  A: { paragraphs: [] }
};

requirements.forEach(req => {
  const step = req.gradeStep as GradeStep;
  if (step in gradeMap) {
    gradeMap[step].paragraphs = extractParagraphs(req.text);
  }
});

// Get the maximum number of criteria across all grade levels
const maxCriteria = Math.max(
  gradeMap.E.paragraphs.length,
  gradeMap.C.paragraphs.length,
  gradeMap.A.paragraphs.length
);

---

<div class="bg-white rounded-lg shadow-sm mb-6 relative z-10">
  <div class="p-6 flex justify-between items-center border-b border-gray-200 bg-white relative z-20">
    <h2 class="text-2xl font-bold text-gray-900">{title}</h2>
    <div class="flex items-center gap-4">
      <div class="flex gap-2">
        <button
          class="view-toggle px-3 py-1.5 rounded-lg text-sm font-medium transition-colors"
          data-view="list"
          data-active="true"
        >
          Lista
        </button>
        <button
          class="view-toggle px-3 py-1.5 rounded-lg text-sm font-medium transition-colors"
          data-view="table"
          data-active="false"
        >
          Tabell
        </button>
      </div>
      <button class="toggle-button" data-toggle="grade-requirements" data-expanded="true">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
        </svg>
      </button>
    </div>
  </div>

  <div class="section-content relative z-10 bg-white" data-section="grade-requirements" style="max-height: none;">
    <!-- List View -->
    <div 
      class="view-content p-6" 
      data-view="list"
      style="display: block;"
    >
      <div class="prose max-w-none space-y-8">
        {requirements.map((req) => (
          <div set:html={req.text} />
        ))}
      </div>
    </div>

    <!-- Table View -->
    <div 
      class="view-content p-6" 
      data-view="table"
      style="display: none;"
    >
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead>
            <tr class="bg-gray-50">
              <th class="px-6 py-3 text-left text-sm font-medium text-gray-900">E</th>
              <th class="px-6 py-3 text-left text-sm font-medium text-gray-900">C</th>
              <th class="px-6 py-3 text-left text-sm font-medium text-gray-900">A</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {Array.from({ length: maxCriteria }, (_, index) => (
              <tr>
                {(['E', 'C', 'A'] as GradeStep[]).map((gradeStep) => (
                  <td class="px-6 py-4 align-top">
                    <div class="prose max-w-none" set:html={gradeMap[gradeStep].paragraphs[index] || '—'} />
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<style>
  .view-toggle[data-active="true"] {
    background-color: rgb(59 130 246);
    color: white;
  }
  .view-toggle[data-active="false"] {
    background-color: rgb(243 244 246);
    color: rgb(75 85 99);
  }
  .view-toggle[data-active="false"]:hover {
    background-color: rgb(229 231 235);
  }
  
  .toggle-button {
    @apply text-gray-400 hover:text-gray-600 transition-colors;
  }
  
  .toggle-button[data-expanded="true"] svg {
    @apply rotate-180;
  }
  
  .section-content {
    @apply overflow-hidden transition-all duration-300;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // View toggle functionality
    const viewToggles = document.querySelectorAll('.view-toggle');
    const viewContents = document.querySelectorAll('.view-content');
    
    viewToggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const view = toggle.getAttribute('data-view');
        
        // Update toggle buttons
        viewToggles.forEach(t => {
          t.setAttribute('data-active', (t === toggle).toString());
        });
        
        // Update content visibility
        viewContents.forEach(content => {
          content.style.display = content.getAttribute('data-view') === view ? '' : 'none';
        });
      });
    });

    // Section toggle functionality
    const toggleButtons = document.querySelectorAll('[data-toggle]');
    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const sectionId = button.getAttribute('data-toggle');
        const section = document.querySelector(`[data-section="${sectionId}"]`);
        const isExpanded = button.getAttribute('data-expanded') === 'true';
        
        button.setAttribute('data-expanded', (!isExpanded).toString());
        
        if (section) {
          if (isExpanded) {
            section.style.maxHeight = '0';
          } else {
            section.style.maxHeight = section.scrollHeight + 'px';
          }
        }
      });
    });
  });
</script>
