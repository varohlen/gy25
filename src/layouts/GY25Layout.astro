---
import Layout from './Layout.astro';

interface Props {
  title?: string;
  searchPlaceholder?: string;
  activeView: 'subjects' | 'courses';
}

const { 
  title = 'GY25',
  searchPlaceholder = 'Sök...',
  activeView 
} = Astro.props;
---

<Layout title={title}>
  <main class="max-w-7xl mx-auto px-4 py-12">
    <div class="flex flex-col items-center gap-6 mb-8">
      <nav class="flex gap-4">
        <a 
          href="/gy25"
          class={`px-4 py-2 rounded-lg transition-colors ${
            activeView === 'subjects' 
              ? 'bg-blue-600 text-white' 
              : 'text-gray-600 hover:bg-gray-100'
          }`}
        >
          Ämnen
        </a>
        <a 
          href="/gy25/courses"
          class={`px-4 py-2 rounded-lg transition-colors ${
            activeView === 'courses' 
              ? 'bg-blue-600 text-white' 
              : 'text-gray-600 hover:bg-gray-100'
          }`}
        >
          Nivåer
        </a>
      </nav>
      
      <div class="w-full max-w-xl relative">
        <input 
          type="text" 
          id="search-input"
          class="w-full px-4 py-3 text-lg rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
          placeholder={searchPlaceholder}
        />
        <svg 
          class="absolute right-4 top-3.5 w-6 h-6 text-gray-400" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path 
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
          />
        </svg>
      </div>
    </div>

    <div id="search-results" class="space-y-4">
      <slot />
      <div id="no-results" class="hidden text-center py-8 text-gray-500">
        Inga resultat hittades
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const noResults = document.getElementById('no-results');
    const searchableItems = document.querySelectorAll('[data-search], [data-searchable]');
    
    let debounceTimeout: ReturnType<typeof setTimeout>;

    if (searchInput && searchableItems.length > 0) {
      searchInput.addEventListener('input', (e) => {
        // Clear the existing timeout
        if (debounceTimeout) {
          clearTimeout(debounceTimeout);
        }

        // Set a new timeout
        debounceTimeout = setTimeout(() => {
          const searchTerm = (e.target as HTMLInputElement).value.toLowerCase().trim();
          let hasVisibleItems = false;

          searchableItems.forEach(item => {
            // Get search text from either data-search or data-searchable attribute
            const searchText = (
              item.getAttribute('data-search') || 
              item.getAttribute('data-searchable') || 
              ''
            ).toLowerCase();

            const shouldShow = searchText.includes(searchTerm);
            (item as HTMLElement).style.display = shouldShow ? '' : 'none';
            
            if (shouldShow) {
              hasVisibleItems = true;
            }
          });

          // Show/hide no results message
          if (noResults) {
            noResults.style.display = hasVisibleItems || !searchTerm ? 'none' : 'block';
          }
        }, 200); // 200ms debounce delay
      });

      // Clear search on escape key
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          searchInput.value = '';
          searchableItems.forEach(item => {
            (item as HTMLElement).style.display = '';
          });
          if (noResults) {
            noResults.style.display = 'none';
          }
        }
      });
    }
  });
</script>
