---
import Layout from './Layout.astro';

interface Props {
  title?: string;
  searchPlaceholder?: string;
  activeView: 'subjects' | 'courses';
}

const { 
  title = 'GY25',
  searchPlaceholder = 'Sök...',
  activeView 
} = Astro.props;
---

<Layout title={title}>
  <main class="max-w-7xl mx-auto px-4 py-12">
    <div class="flex flex-col items-center gap-6 mb-8">
      <nav class="flex gap-4">
        <a 
          href="/gy25/subjects" 
          class={`px-6 py-3 rounded-lg text-base font-medium transition-colors ${
            activeView === 'subjects' 
              ? 'bg-blue-100 text-blue-900' 
              : 'text-gray-600 hover:bg-gray-100'
          }`}
        >
          Ämnen
        </a>
        <a 
          href="/gy25/courses" 
          class={`px-6 py-3 rounded-lg text-base font-medium transition-colors ${
            activeView === 'courses' 
              ? 'bg-blue-100 text-blue-900' 
              : 'text-gray-600 hover:bg-gray-100'
          }`}
        >
          Nivåer
        </a>
      </nav>
      
      <div class="w-full max-w-xl relative">
        <input 
          type="text" 
          id="search-input"
          class="w-full px-4 py-3 text-lg rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
          placeholder={searchPlaceholder}
        />
        <svg 
          class="absolute right-4 top-3.5 w-6 h-6 text-gray-400" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path 
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
          />
        </svg>
      </div>
    </div>

    <slot />
  </main>
</Layout>

<script>
  // Common search functionality that can be extended by child pages
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const searchableElements = document.querySelectorAll('[data-searchable]');
    
    searchInput?.addEventListener('input', (e) => {
      const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
      
      searchableElements.forEach((element) => {
        const searchText = element.getAttribute('data-searchable')?.toLowerCase() || '';
        element.classList.toggle('hidden', !searchText.includes(searchTerm));
      });
    });
  });
</script>
